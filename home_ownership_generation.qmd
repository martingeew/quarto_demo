---
title: "New Zealand Housing Demographics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a interactiive plotly line plot, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "Home Ownership Rate (mean) by Generation<br>Source: Statistics NZ"

import pandas as pd
import plotly.express as px

# Load the demographic share dataset
df_ownership = pd.read_csv("home_ownership_generation.csv", sep=",")


# Function to plot home ownership rates by age and generation using Plotly
def plot_ownership_by_age_and_generation_plotly(df):
    # Define the custom color palette
    colors = {
        "Gen X": "#636EFA",  # blue
        "Baby Boomer": "#B6E880",  # light green
        "Gen Z": "#FFA15A",  # orange
        "Millennial": "#EF553B",  # red
        "Silent": "#FF97FF",  # pink
    }

    # Create the plot
    fig = px.line(
        df,
        x="Age group",
        y="Home Ownership Rate",
        color="Generation",
        title="",
        labels={
            "Age group": "Age Group",
            "Home Ownership Rate": "Home Ownership Rate (%)",
        },
        line_shape="linear",
        color_discrete_map=colors,  # Apply the custom color palette
    )

    fig.update_layout(
        xaxis_title="Age Group",
        yaxis_title="",
        legend_title_text="",
        template="plotly_dark",
        xaxis=dict(tickangle=45),
        plot_bgcolor="#282a36",
        paper_bgcolor="#282a36",
        font=dict(size=14, family="Consolas"),  # Set the font to Consolas
        title_font=dict(size=18, family="Consolas"),
        width=500,  # Adjust based on your needs
        height=450,  # Adjust based on your needs
        margin=dict(l=20, r=20, t=40, b=20),
    )

    fig.update_yaxes(title_text="", range=[40, 90])

    fig.show()


# Plot the data using Plotly

df_ownership_grouped = (
    df_ownership[
        (df_ownership["Generation"] != "Other")
        & (df_ownership["Generation"] != "Total")
        & (~df_ownership["Age group"].isin(["0-4", "5-9", "10-14"]))
    ]
    .groupby(["Age group", "Generation"])["Home Ownership Rate"]
    .mean()
    .reset_index()
)

plot_ownership_by_age_and_generation_plotly(df_ownership_grouped)
```

For a demonstration of a interactiive plotly line plot, see @fig-pop-distribution.

```{python}
#| label: fig-pop-distribution
#| fig-cap: "Population Distribution by Age Group<br>Source: Statistics NZ"

import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# Load the dataset
df = pd.read_csv("pop_estimate_processed_nz.csv", sep=",")
df_2030 = pd.read_csv("pop_estimate_processed_2030.csv", sep=",")


# Concatenate df_2030 to df
df_combined = pd.concat([df, df_2030], ignore_index=True)

# Apply the relabeling function to the 'Age' column
df_combined["Age"] = df_combined["Age"].apply(
    lambda age: "90+" if age == "90 Years and over" else age
)

# Define the years of interest for plotting (excluding 2018)
years = [1996, 2006, 2023, 2030]

# Create a subplot figure with 2 rows and 2 columns
fig = make_subplots(
    rows=2, cols=2, shared_yaxes=True, subplot_titles=[f"{year}" for year in years]
)

row_col_pairs = [(1, 1), (1, 2), (2, 1), (2, 2)]

for (row, col), year in zip(row_col_pairs, years):
    # Filter data for the specific year
    year_data = df_combined[df_combined["Year"] == year]

    # Determine bar colors based on 'Generation'
    colors = [
        "orange" if gen == "Baby Boomer" else "skyblue"
        for gen in year_data["Generation"]
    ]

    # Create bar traces for each age group
    fig.add_trace(
        go.Bar(
            x=year_data["Age"],
            y=year_data["Population"],
            marker_color=colors,
            showlegend=False,
        ),
        row=row,
        col=col,
    )

# Add annotation pointing to the 'Baby Boomer' bar for 1996
fig.add_annotation(
    x="65-69 Years",
    y=270000,  # Adjust the y-coordinate to move the annotation down
    xref="x1",
    yref="y1",
    text="Baby Boomers",
    showarrow=False,
    font=dict(
        color="orange", size=16, family="Consolas"
    ),  # Increase the font size and set font family
)

# Update layout for dark mode
fig.update_layout(
    template="plotly_dark",
    width=700,  
    height=700,  
    margin=dict(l=20, r=20, t=40, b=20),
    title_text="",
    plot_bgcolor="#282a36",
    paper_bgcolor="#282a36",
    font=dict(size=14, family="Consolas"),  # Set the font family for the entire plot
)

# Update axis labels and rotate x-axis tick labels
fig.update_xaxes(title_text="", tickangle=45, tickfont=dict(family="Consolas"))
fig.update_yaxes(title_text="", showticklabels=True, tickfont=dict(family="Consolas"))
fig.update_yaxes(title_text="", range=[0, 400000])


fig.show()
```

